plugins {
    id "pmd"
    id "com.diffplug.spotless" version "6.8.0"
    id "com.gradle.plugin-publish" version "1.0.0"
    id "com.wagner.gitver" version "0.1.0"
}

/* Version Configuration */

group = "org.gatored"
def build_number = "git rev-list --count master".execute().text.trim()
println("\u001B[1;36mVERSION ${version}  --  BUILD ${build_number}\u001B[0m")

/* GatorGradle Dependency Configuration */

repositories {
    mavenCentral()
}

dependencies {
    implementation gradleApi()
}

/* Plugin Specification */

pluginBundle {
    website = "https://gatoreducator.github.io/gatorgradle/"
    vcsUrl = "https://github.com/gatoreducator/gatorgradle"
    tags = ["grading", "allegheny", "gatorgrader"]
}

gradlePlugin {
    plugins {
        gatorgradle {
            id = "${group}.${name}"
            description = "Integrates GatorGrader checking as a Gradle task, as used at Allegheny College."
            displayName = "GatorGradle"
            implementationClass = "org.gatorgradle.GatorGradlePlugin"
        }
    }
}

publishing {
    repositories {
        maven {
            name = "mavenLocal"
            url = "file://${System.properties['user.home']}/.m2/repository"
        }
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'GatorGradle',
                   'Implementation-Version': project.version,
                   'Implementation-Build': build_number
    }
}

/* Publishing Tasks */

task publishJavadocs(type: GradleBuild) {
    def docFolder = "docs/${version}"
    project.tasks.findByName("javadoc").destinationDir = file(docFolder)

    tasks = ['clean', '_cleanJavadoc', 'javadoc', '_publishJavadocs']
}

task _cleanJavadoc(type: Delete) {
    delete "docs/${version}"
}

task _publishJavadocs(type: Exec) {
    dependsOn 'javadoc'

    // TODO: determine this better
    def status = "passing"
    def docFolder = "docs/${version}"
    def date = new Date().format("MMMM d, YYYY", TimeZone.getTimeZone("UTC"))

    commandLine "./scripts/publishJavadocs.sh", docFolder, status, version, build_number, date
}

/* Quality Control Configuration */

spotless {
  format "misc", {
    target("*.gradle", ".gitignore")
    trimTrailingWhitespace()
    indentWithSpaces(2)
    endWithNewline()
  }
  java {
    googleJavaFormat("1.7")
    trimTrailingWhitespace()
    endWithNewline()
    importOrder("java", "javax", "org", "com")
  }
}

pmd {
  // incrementalAnalysis = true
  ruleSets = []
  ruleSetFiles = files(".pmdrules.xml")
}

task format {
    dependsOn spotlessApply
    doLast { print "Formatted!" }
}

tasks.withType(JavaCompile) {
    //enable compilation in a separate daemon process
    options.deprecation = true
}
