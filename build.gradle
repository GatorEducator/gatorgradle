plugins {
    id "maven"
    id "java-gradle-plugin"
    id "com.gradle.plugin-publish" version "0.10.1"
    id "ru.vyarus.quality" version "4.0.0"
}

group = "${artifact_group}"
version = "${artifact_release}.${artifact_patch}"
def build = "git rev-list --count master".execute().text.trim()

println("\u001B[1;36mVERSION ${version}  --  BUILD ${build}\u001B[0m")

pluginBundle {
    website = "https://gatoreducator.github.io/gatorgradle/"
    vcsUrl = "https://github.com/gatoreducator/gatorgradle"
    description = "Gradle plugin for integrating the grading tool GatorGrader as a runnable, configurable task"
    tags = ["grading", "allegheny", "gatorgrader", "mdl", "proselint"]

    plugins {
        gatorgradle {
            id = "${artifact_name}"
            description = "Integrates GatorGrader checking as a task, as used at Allegheny College."
            displayName = "GatorGradle"
      }
  }
}

gradlePlugin {
    plugins {
        gatorgradle {
            id = "${artifact_name}"
            implementationClass = "org.gatorgradle.GatorGradlePlugin"
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://${System.properties['user.home']}/.m2/repository")
        }
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'GatorGradle',
                   'Implementation-Version': version
    }
}

task publishJavadocs(type: GradleBuild) {
    def docFolder = "docs/${version}"
    project.tasks.findByName("javadoc").destinationDir = file(docFolder)

    tasks = ['clean', '_cleanJavadoc', 'javadoc', '_publishJavadocs']
}

task _cleanJavadoc(type: Delete) {
    delete "docs/${version}"
}

task _publishJavadocs(type: Exec) {
    dependsOn 'javadoc'

    // TODO: determine this better
    def status = "passing"
    def docFolder = "docs/${version}"
    def date = new Date().format("MMMM d, YYYY", TimeZone.getTimeZone("UTC"))

    commandLine "./scripts/publishJavadocs.sh", docFolder, status, version, build, date
}

quality {
    checkstyleVersion = "8.16"

    checkstyle = true
    pmd = false;
    spotbugs = true
    codenarc = true

    spotbugsEffort = "max"
    spotbugsLevel = "low"

    strict = true
}

afterEvaluate {
    checkstyle {
        ignoreFailures = false
        maxErrors = 0
        maxWarnings = 0
    }
}

dependencies {
    compile gradleApi()
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

/* tasks.whenTaskAdded { task ->
    if (task.getName().contains("PluginMavenPublication")) {
        task.setDependsOn([])
        task.setMustRunAfter([])
        task.setShouldRunAfter([])
        task.setEnabled(false)
    }
} */
